rules_version = '2';
service cloud.firestore {
  // add near the top of firestore.rules
  match /matches/{matchId} {
    allow update: if isAdmin() || isScorekeeper();
    allow read  : if true;
  }
  match /databases/{database}/documents {

    /* ───────── PUBLIC READ ───────── */

    match /events/{eventId} {
      allow read:  if true;
      allow write: if isAdmin();
    }

    match /matches/{matchId} {
      allow read:  if true;
      allow write: if isAdmin() ||
                   isAllowedScorekeeper(resource.data.event_id);
      allow update: if request.auth != null
                    && request.auth.token.role == "scorekeeper"
                    && resource.data.status in ["scheduled","live"]
                    && (
                        (   // starting a match
                            request.resource.data.status == "live"
                            && request.resource.data.actual_start is timestamp
                        )
                        ||
                        (   // finishing a match
                            request.resource.data.status == "final"
                            && request.resource.data.score_a is number
                            && request.resource.data.score_b is number
                        )
                      );
    }

    match /teams/{teamId} {
      allow read:  if true;
      allow write: if isAdmin();
      allow list: if isAdmin();                 // needed for aggregate queries
    }

    match /registrations/{regId} {
      allow read:  if true;
      allow write: if isAdmin();
    }

    match /awards/{awardId} {
      allow read:  if true;
      allow write: if isAdmin();
    }

    /* ───────── USER DOCS ───────── */

    match /users/{userId} {
      // each user may read (for awards page)
      allow read:  if true;
      allow write: if isAdmin();   // only admins edit user docs
      allow list: if isAdmin();                 // needed for aggregate queries
      allow get:  if isAdmin() || (request.auth != null && request.auth.uid == uid);
    }

    /* ───────── HELPER FUNCTIONS ───────── */

    function isAdmin() {
      return request.auth != null &&
             request.auth.token.role == 'admin';
    }

    function isAllowedScorekeeper(evId) {
      return request.auth != null &&
             request.auth.token.role == 'scorekeeper' &&
             (
               // global scope
               get(/databases/$(database)/documents/users/$(request.auth.uid))
                 .data.score_scope == 'all' ||

               // event-specific scope
               get(/databases/$(database)/documents/users/$(request.auth.uid))
                 .data.assigned_event_ids.hasAny([evId])
             );
    }
  }
}